/*
 * This file is generated by jOOQ.
 */
package ca.ultracrepidarianism.kingdom.model.test;


import ca.ultracrepidarianism.kingdom.model.test.tables.Claims;
import ca.ultracrepidarianism.kingdom.model.test.tables.Kingdoms;
import ca.ultracrepidarianism.kingdom.model.test.tables.Players;
import ca.ultracrepidarianism.kingdom.model.test.tables.records.ClaimsRecord;
import ca.ultracrepidarianism.kingdom.model.test.tables.records.KingdomsRecord;
import ca.ultracrepidarianism.kingdom.model.test.tables.records.PlayersRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * minecraft.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ClaimsRecord> KEY_CLAIMS_PRIMARY = Internal.createUniqueKey(Claims.CLAIMS, DSL.name("KEY_claims_PRIMARY"), new TableField[] { Claims.CLAIMS.ID }, true);
    public static final UniqueKey<KingdomsRecord> KEY_KINGDOMS_PRIMARY = Internal.createUniqueKey(Kingdoms.KINGDOMS, DSL.name("KEY_kingdoms_PRIMARY"), new TableField[] { Kingdoms.KINGDOMS.ID }, true);
    public static final UniqueKey<KingdomsRecord> KEY_KINGDOMS_UK_8RC75Q274G33XWEXOWQ5PSMJM = Internal.createUniqueKey(Kingdoms.KINGDOMS, DSL.name("KEY_kingdoms_UK_8rc75q274g33xwexowq5psmjm"), new TableField[] { Kingdoms.KINGDOMS.OWNERUUID }, true);
    public static final UniqueKey<PlayersRecord> KEY_PLAYERS_PRIMARY = Internal.createUniqueKey(Players.PLAYERS, DSL.name("KEY_players_PRIMARY"), new TableField[] { Players.PLAYERS.UUID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ClaimsRecord, KingdomsRecord> FK_CLAIM_KINGDOM = Internal.createForeignKey(Claims.CLAIMS, DSL.name("FK_CLAIM_KINGDOM"), new TableField[] { Claims.CLAIMS.KINGDOMID }, Keys.KEY_KINGDOMS_PRIMARY, new TableField[] { Kingdoms.KINGDOMS.ID }, true);
    public static final ForeignKey<KingdomsRecord, PlayersRecord> FK_KINGDOM_OWNER = Internal.createForeignKey(Kingdoms.KINGDOMS, DSL.name("FK_KINGDOM_OWNER"), new TableField[] { Kingdoms.KINGDOMS.OWNERUUID }, Keys.KEY_PLAYERS_PRIMARY, new TableField[] { Players.PLAYERS.UUID }, true);
    public static final ForeignKey<PlayersRecord, KingdomsRecord> FK_PLAYER_KINGDOM = Internal.createForeignKey(Players.PLAYERS, DSL.name("FK_PLAYER_KINGDOM"), new TableField[] { Players.PLAYERS.KINGDOMID }, Keys.KEY_KINGDOMS_PRIMARY, new TableField[] { Kingdoms.KINGDOMS.ID }, true);
}
