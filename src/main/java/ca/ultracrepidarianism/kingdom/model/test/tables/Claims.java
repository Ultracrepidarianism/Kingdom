/*
 * This file is generated by jOOQ.
 */
package ca.ultracrepidarianism.kingdom.model.test.tables;


import ca.ultracrepidarianism.kingdom.model.test.Keys;
import ca.ultracrepidarianism.kingdom.model.test.Minecraft;
import ca.ultracrepidarianism.kingdom.model.test.tables.records.ClaimsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Claims extends TableImpl<ClaimsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>minecraft.claims</code>
     */
    public static final Claims CLAIMS = new Claims();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClaimsRecord> getRecordType() {
        return ClaimsRecord.class;
    }

    /**
     * The column <code>minecraft.claims.id</code>.
     */
    public final TableField<ClaimsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>minecraft.claims.world</code>.
     */
    public final TableField<ClaimsRecord, String> WORLD = createField(DSL.name("world"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>minecraft.claims.x</code>.
     */
    public final TableField<ClaimsRecord, Integer> X = createField(DSL.name("x"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>minecraft.claims.z</code>.
     */
    public final TableField<ClaimsRecord, Integer> Z = createField(DSL.name("z"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>minecraft.claims.kingdomId</code>.
     */
    public final TableField<ClaimsRecord, Long> KINGDOMID = createField(DSL.name("kingdomId"), SQLDataType.BIGINT, this, "");

    private Claims(Name alias, Table<ClaimsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Claims(Name alias, Table<ClaimsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>minecraft.claims</code> table reference
     */
    public Claims(String alias) {
        this(DSL.name(alias), CLAIMS);
    }

    /**
     * Create an aliased <code>minecraft.claims</code> table reference
     */
    public Claims(Name alias) {
        this(alias, CLAIMS);
    }

    /**
     * Create a <code>minecraft.claims</code> table reference
     */
    public Claims() {
        this(DSL.name("claims"), null);
    }

    public <O extends Record> Claims(Table<O> child, ForeignKey<O, ClaimsRecord> key) {
        super(child, key, CLAIMS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Minecraft.MINECRAFT;
    }

    @Override
    public Identity<ClaimsRecord, Long> getIdentity() {
        return (Identity<ClaimsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ClaimsRecord> getPrimaryKey() {
        return Keys.KEY_CLAIMS_PRIMARY;
    }

    @Override
    public List<ForeignKey<ClaimsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_CLAIM_KINGDOM);
    }

    private transient Kingdoms _kingdoms;

    /**
     * Get the implicit join path to the <code>minecraft.kingdoms</code> table.
     */
    public Kingdoms kingdoms() {
        if (_kingdoms == null)
            _kingdoms = new Kingdoms(this, Keys.FK_CLAIM_KINGDOM);

        return _kingdoms;
    }

    @Override
    public Claims as(String alias) {
        return new Claims(DSL.name(alias), this);
    }

    @Override
    public Claims as(Name alias) {
        return new Claims(alias, this);
    }

    @Override
    public Claims as(Table<?> alias) {
        return new Claims(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Claims rename(String name) {
        return new Claims(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Claims rename(Name name) {
        return new Claims(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Claims rename(Table<?> name) {
        return new Claims(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, Integer, Integer, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super String, ? super Integer, ? super Integer, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super String, ? super Integer, ? super Integer, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
