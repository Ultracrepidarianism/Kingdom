/*
 * This file is generated by jOOQ.
 */
package ca.ultracrepidarianism.kingdom.model.test.tables.records;


import ca.ultracrepidarianism.kingdom.model.test.enums.PlayersPermissionlevel;
import ca.ultracrepidarianism.kingdom.model.test.tables.Players;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlayersRecord extends UpdatableRecordImpl<PlayersRecord> implements Record3<String, PlayersPermissionlevel, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>minecraft.players.UUID</code>.
     */
    public void setUuid(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>minecraft.players.UUID</code>.
     */
    public String getUuid() {
        return (String) get(0);
    }

    /**
     * Setter for <code>minecraft.players.permissionLevel</code>.
     */
    public void setPermissionlevel(PlayersPermissionlevel value) {
        set(1, value);
    }

    /**
     * Getter for <code>minecraft.players.permissionLevel</code>.
     */
    public PlayersPermissionlevel getPermissionlevel() {
        return (PlayersPermissionlevel) get(1);
    }

    /**
     * Setter for <code>minecraft.players.kingdomId</code>.
     */
    public void setKingdomid(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>minecraft.players.kingdomId</code>.
     */
    public Long getKingdomid() {
        return (Long) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, PlayersPermissionlevel, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, PlayersPermissionlevel, Long> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Players.PLAYERS.UUID;
    }

    @Override
    public Field<PlayersPermissionlevel> field2() {
        return Players.PLAYERS.PERMISSIONLEVEL;
    }

    @Override
    public Field<Long> field3() {
        return Players.PLAYERS.KINGDOMID;
    }

    @Override
    public String component1() {
        return getUuid();
    }

    @Override
    public PlayersPermissionlevel component2() {
        return getPermissionlevel();
    }

    @Override
    public Long component3() {
        return getKingdomid();
    }

    @Override
    public String value1() {
        return getUuid();
    }

    @Override
    public PlayersPermissionlevel value2() {
        return getPermissionlevel();
    }

    @Override
    public Long value3() {
        return getKingdomid();
    }

    @Override
    public PlayersRecord value1(String value) {
        setUuid(value);
        return this;
    }

    @Override
    public PlayersRecord value2(PlayersPermissionlevel value) {
        setPermissionlevel(value);
        return this;
    }

    @Override
    public PlayersRecord value3(Long value) {
        setKingdomid(value);
        return this;
    }

    @Override
    public PlayersRecord values(String value1, PlayersPermissionlevel value2, Long value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PlayersRecord
     */
    public PlayersRecord() {
        super(Players.PLAYERS);
    }

    /**
     * Create a detached, initialised PlayersRecord
     */
    public PlayersRecord(String uuid, PlayersPermissionlevel permissionlevel, Long kingdomid) {
        super(Players.PLAYERS);

        setUuid(uuid);
        setPermissionlevel(permissionlevel);
        setKingdomid(kingdomid);
        resetChangedOnNotNull();
    }
}
