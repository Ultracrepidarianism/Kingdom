/*
 * This file is generated by jOOQ.
 */
package ca.ultracrepidarianism.kingdom.model.test.tables;


import ca.ultracrepidarianism.kingdom.model.test.Keys;
import ca.ultracrepidarianism.kingdom.model.test.Minecraft;
import ca.ultracrepidarianism.kingdom.model.test.tables.records.KingdomsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Kingdoms extends TableImpl<KingdomsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>minecraft.kingdoms</code>
     */
    public static final Kingdoms KINGDOMS = new Kingdoms();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KingdomsRecord> getRecordType() {
        return KingdomsRecord.class;
    }

    /**
     * The column <code>minecraft.kingdoms.id</code>.
     */
    public final TableField<KingdomsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>minecraft.kingdoms.kingdomName</code>.
     */
    public final TableField<KingdomsRecord, String> KINGDOMNAME = createField(DSL.name("kingdomName"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>minecraft.kingdoms.ownerUUID</code>.
     */
    public final TableField<KingdomsRecord, String> OWNERUUID = createField(DSL.name("ownerUUID"), SQLDataType.VARCHAR(255), this, "");

    private Kingdoms(Name alias, Table<KingdomsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Kingdoms(Name alias, Table<KingdomsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>minecraft.kingdoms</code> table reference
     */
    public Kingdoms(String alias) {
        this(DSL.name(alias), KINGDOMS);
    }

    /**
     * Create an aliased <code>minecraft.kingdoms</code> table reference
     */
    public Kingdoms(Name alias) {
        this(alias, KINGDOMS);
    }

    /**
     * Create a <code>minecraft.kingdoms</code> table reference
     */
    public Kingdoms() {
        this(DSL.name("kingdoms"), null);
    }

    public <O extends Record> Kingdoms(Table<O> child, ForeignKey<O, KingdomsRecord> key) {
        super(child, key, KINGDOMS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Minecraft.MINECRAFT;
    }

    @Override
    public Identity<KingdomsRecord, Long> getIdentity() {
        return (Identity<KingdomsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<KingdomsRecord> getPrimaryKey() {
        return Keys.KEY_KINGDOMS_PRIMARY;
    }

    @Override
    public List<UniqueKey<KingdomsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_KINGDOMS_UK_8RC75Q274G33XWEXOWQ5PSMJM);
    }

    @Override
    public List<ForeignKey<KingdomsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_KINGDOM_OWNER);
    }

    private transient Players _players;

    /**
     * Get the implicit join path to the <code>minecraft.players</code> table.
     */
    public Players players() {
        if (_players == null)
            _players = new Players(this, Keys.FK_KINGDOM_OWNER);

        return _players;
    }

    @Override
    public Kingdoms as(String alias) {
        return new Kingdoms(DSL.name(alias), this);
    }

    @Override
    public Kingdoms as(Name alias) {
        return new Kingdoms(alias, this);
    }

    @Override
    public Kingdoms as(Table<?> alias) {
        return new Kingdoms(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Kingdoms rename(String name) {
        return new Kingdoms(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Kingdoms rename(Name name) {
        return new Kingdoms(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Kingdoms rename(Table<?> name) {
        return new Kingdoms(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
