/*
 * This file is generated by jOOQ.
 */
package ca.ultracrepidarianism.kingdom.model.test.tables.records;


import ca.ultracrepidarianism.kingdom.model.test.tables.Kingdoms;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KingdomsRecord extends UpdatableRecordImpl<KingdomsRecord> implements Record3<Long, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>minecraft.kingdoms.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>minecraft.kingdoms.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>minecraft.kingdoms.kingdomName</code>.
     */
    public void setKingdomname(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>minecraft.kingdoms.kingdomName</code>.
     */
    public String getKingdomname() {
        return (String) get(1);
    }

    /**
     * Setter for <code>minecraft.kingdoms.ownerUUID</code>.
     */
    public void setOwneruuid(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>minecraft.kingdoms.ownerUUID</code>.
     */
    public String getOwneruuid() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Kingdoms.KINGDOMS.ID;
    }

    @Override
    public Field<String> field2() {
        return Kingdoms.KINGDOMS.KINGDOMNAME;
    }

    @Override
    public Field<String> field3() {
        return Kingdoms.KINGDOMS.OWNERUUID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getKingdomname();
    }

    @Override
    public String component3() {
        return getOwneruuid();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getKingdomname();
    }

    @Override
    public String value3() {
        return getOwneruuid();
    }

    @Override
    public KingdomsRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public KingdomsRecord value2(String value) {
        setKingdomname(value);
        return this;
    }

    @Override
    public KingdomsRecord value3(String value) {
        setOwneruuid(value);
        return this;
    }

    @Override
    public KingdomsRecord values(Long value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached KingdomsRecord
     */
    public KingdomsRecord() {
        super(Kingdoms.KINGDOMS);
    }

    /**
     * Create a detached, initialised KingdomsRecord
     */
    public KingdomsRecord(Long id, String kingdomname, String owneruuid) {
        super(Kingdoms.KINGDOMS);

        setId(id);
        setKingdomname(kingdomname);
        setOwneruuid(owneruuid);
        resetChangedOnNotNull();
    }
}
